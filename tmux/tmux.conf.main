base_path="$HOME/.config/tmux"

setenv -g TMUX_PLUGIN_MANAGER_PATH "$base_path/plugins/"

# Unbind ALL keybindings whilst REBINDING defaults
run-shell '\
    export f=$(mktemp) \
    && tmux -f /dev/null -L temp start-server \; list-keys > $f \
    && tmux unbind -a \; source-file $f'
# Reload tmux config
bind-key R source-file $base_path/tmux.conf \; display-message "$base_path/tmux.conf reloaded"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'fcsonline/tmux-thumbs'

if "test ! -d $base_path/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm $base_path/plugins/tpm && $base_path/plugins/tpm/bin/install_plugins'"

source-file "$base_path/theme.conf"

set -g default-terminal "tmux"
set -g set-clipboard on

# What's this for?
set -ga terminal-overrides ",xterm-256color:RGB"

set -ga terminal-features "sync"

# I think this forces the client window size to be the biggest one
set -g window-size latest
setw -g aggressive-resize on

# Detects whether Vim is currently loaded
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Hmm ðŸ™„ Needed for Home/End in Neovim
# See: https://github.com/neovim/neovim/issues/6134#issuecomment-758475291
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

# The main shortcut to access all tmux's commands
set-option -g prefix C-a

# Mouse support. Clicking in panes to switch to them, etc
set -g mouse on

# Update tmux pane titles
set -g allow-rename 1

# So vim knows when it gets focus. Used so that autoread detects changes
# to files not made by the editor. Requires 'tmux-plugins/vim-tmux-focus-events'
# in vim.
set -g focus-events on
# Makes vim more responsive inside tmux??
set -g escape-time 0

# Try to save on memory by limiting how far you can scrollback
set -g history-limit 100000

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
bind-key -n M-Left  select-pane -L
bind-key -n M-Down  select-pane -D
bind-key -n M-Right select-pane -R
bind-key -n M-Up    select-pane -U

# Gotta bind the same nav keys for 'scroll' mode
bind-key -T copy-mode-vi M-Left  select-pane -L
bind-key -T copy-mode-vi M-Down  select-pane -D
bind-key -T copy-mode-vi M-Up    select-pane -U
bind-key -T copy-mode-vi M-Right select-pane -R

# Basic navigation
bind -n C-M-Right next-window
bind -n C-M-Left  previous-window
bind -n C-M-Up    switch-client -n
bind -n C-M-Down  switch-client -p

# Making splits
bind | split-window -h -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Copying and pasting
set-window-option -g mode-keys vi
# Easily get into copy mode but don't mess with Vim.
bind -n Pageup if-shell "$is_vim" "send-keys Pageup" "copy-mode -u"
# Conventional shortcuts for copy and paste
bind-key -T copy-mode-vi C-c send-keys -X copy-selection-and-cancel
bind -n S-Left if-shell "$is_vim" "send-keys S-Left" "copy-mode \; send -X begin-selection \; send-keys Left"
bind -n S-Right if-shell "$is_vim" "send-keys S-Right" "copy-mode \; send -X begin-selection \; send-keys Right"
bind -n C-Up if-shell "$is_vim" "send-keys C-Up" "copy-mode \; send-keys Up"
bind -n C-Down if-shell "$is_vim" "send-keys C-Down" "copy-mode \; send-keys Down"

# Rather complex code to make SHIFT+ARROW keys work as you'd normally expect during selection
is_selecting="[[ \"#{selection_present}\" -eq \"1\" ]]"
bind -n -T copy-mode-vi Left \
    send-keys -X clear-selection \; send-keys -X cursor-left
bind -n -T copy-mode-vi S-Left \
  if-shell "$is_selecting" \
    "send-keys -X cursor-left" \
    "send-keys -X begin-selection \; send-keys -X cursor-left"
bind -n -T copy-mode-vi Right \
    send-keys -X clear-selection \; send-keys -X cursor-right
bind -n -T copy-mode-vi S-Right \
  if-shell "$is_selecting" \
    "send-keys -X cursor-right" \
    "send-keys -X begin-selection \; send-keys -X cursor-right"
bind -n -T copy-mode-vi Up \
    send-keys -X clear-selection \; send-keys -X cursor-up
bind -n -T copy-mode-vi S-Up \
  if-shell "$is_selecting" \
    "send-keys -X cursor-up" \
    "send-keys -X begin-selection \; send-keys -X cursor-up"
bind -n -T copy-mode-vi Down \
    send-keys -X clear-selection \; send-keys -X cursor-down
bind -n -T copy-mode-vi S-Down \
  if-shell "$is_selecting" \
    "send-keys -X cursor-down" \
    "send-keys -X begin-selection \; send-keys -X cursor-down"

# ALT+d select current word
bind -n M-d if-shell "$is_vim" "send-keys M-d" "copy-mode \; send-keys b \; send -X begin-selection \; send-keys E"
# CTRL+d select current word
bind -n -T copy-mode-vi C-d send-keys b \; send -X begin-selection \; send-keys E
# CTRL+LEFT/RIGHT move by word
bind -n -T copy-mode-vi C-Left send-keys b
bind -n -T copy-mode-vi C-Right send-keys E

# ALT+z zoom-focusses the current pane
bind -n M-z resize-pane -Z

set -g @continuum-restore 'on'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes 'nvim htop btm tail "sudo bandwhich" "sampler --config ~/.config/sampler.yml"'
set -g @resurrect-dir "$base_path/resurrect"

set -g @thumbs-osc52 1

# This version of booting ressurect works for `tmux start-server` as well. Which is nice for starting
# tmux in the backgrounda at boot.
run -b "$base_path/plugins/tmux-resurrect/scripts/restore.sh r"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "$base_path/plugins/tpm/tpm"
